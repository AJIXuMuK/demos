{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "PnP Carousel Demo",
  "steps": [
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/IPnPCarouselDemoWebPartProps.ts",
      "description": "Let's modify our root component `prop`\n\n```typescript\n  /**\n   * Site where the document library with carousel images is located\n   */\n  siteUrl: string | undefined;\n  /**\n   * Carousel images Document library id\n   */\n  listId: string | undefined;\n  /**\n   * Http client to communicate with SharePoint\n   */\n  spHttpClient: SPHttpClient;\n\n  /**\n   * Web part's title\n   */\n  title: string | undefined;\n  /**\n   * Page display mode\n   */\n  displayMode: DisplayMode;\n  /**\n   * Event handler for PnP WebPartTitle\n   */\n  updateTitle: (title: string) => void;\n  \n  /**\n   * Event handler for PnP Placeholder\n   */\n  onConfigure: () => void;\n```",
      "line": 33,
      "selection": {
        "start": {
          "line": 4,
          "character": 3
        },
        "end": {
          "line": 4,
          "character": 23
        }
      },
      "title": "Modify Component Props"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/IPnPCarouselDemoWebPartProps.ts",
      "description": "Few imports from SPFx modules:\n```typescript\nimport { DisplayMode } from \"@microsoft/sp-core-library\";\nimport { SPHttpClient } from '@microsoft/sp-http';\n\n```",
      "title": "Add Imports in Props",
      "line": 2,
      "selection": {
        "start": {
          "line": 2,
          "character": 1
        },
        "end": {
          "line": 2,
          "character": 1
        }
      }
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/PnPCarouselDemoWebPartWebPart.ts",
      "description": "Let's import PnP Property Controls to add them to the Property Pane\n\n```typescript\n\nimport { PropertyFieldSitePicker, IPropertyFieldSite } from '@pnp/spfx-property-controls/lib/PropertyFieldSitePicker';\nimport { PropertyFieldListPicker } from '@pnp/spfx-property-controls/lib/PropertyFieldListPicker';\n\n```",
      "line": 13,
      "title": "Web Part imports"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/PnPCarouselDemoWebPartWebPart.ts",
      "description": "Now we need to update web part properties to store selected site, list id and updated title.\n\n```typescript\nsites?: IPropertyFieldSite[];\nlistId?: string;\ntitle?: string;\n```",
      "line": 18,
      "selection": {
        "start": {
          "line": 18,
          "character": 3
        },
        "end": {
          "line": 18,
          "character": 23
        }
      },
      "title": "Web Part Properties"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/PnPCarouselDemoWebPartWebPart.ts",
      "description": "Now we can remove property pane text field for description and insert PnP Property controls.\nFirst one is `PropertyFieldSitePicker`:\n\n```typescript\nPropertyFieldSitePicker('sites', {\n  context: this.context,\n  properties: this.properties,\n  label: 'Select Site',\n  onPropertyChange: this.onPropertyPaneFieldChanged,\n  multiSelect: false,\n  initialSites: this.properties.sites,\n  key: 'sites'\n}),\n```",
      "line": 63,
      "selection": {
        "start": {
          "line": 55,
          "character": 17
        },
        "end": {
          "line": 57,
          "character": 19
        }
      },
      "title": "Site Picker Prop Pane Control"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/PnPCarouselDemoWebPartWebPart.ts",
      "description": "And then `PropertyFieldListPicker`:\n\n```typescript\n\nPropertyFieldListPicker('listId', {\n  context: this.context,\n  selectedList: this.properties.listId,\n  disabled: !this.properties.sites,\n  webAbsoluteUrl: this.properties.sites ? this.properties.sites[0].url : '',\n  properties: this.properties,\n  onPropertyChange: this.onPropertyPaneFieldChanged,\n  key: 'listid',\n  baseTemplate: 101,\n  label: 'Select document library'\n})\n```",
      "line": 64,
      "title": "List Picker Prop Pane Control"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/PnPCarouselDemoWebPartWebPart.ts",
      "description": "Now let's pass needed properties to our component:\n\n```typescript\nsiteUrl: this.properties.sites ? this.properties.sites[0].url : undefined,\nlistId: this.properties.listId,\ntitle: this.properties.title,\ndisplayMode: this.displayMode,\nonConfigure: () => {\n  this.context.propertyPane.open();\n},\nupdateTitle: title => {\n  this.properties.title = title;\n},\nspHttpClient: this.context.spHttpClient\n```",
      "line": 29,
      "selection": {
        "start": {
          "line": 29,
          "character": 9
        },
        "end": {
          "line": 29,
          "character": 49
        }
      },
      "title": "Pass properties to the component"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "Let's import all the types we need:\n```typescript\nimport { SPHttpClient } from '@microsoft/sp-http';\nimport { Placeholder } from '@pnp/spfx-controls-react/lib/Placeholder';\nimport { WebPartTitle } from '@pnp/spfx-controls-react/lib/WebPartTitle';\nimport { Carousel, CarouselButtonsLocation, CarouselButtonsDisplay } from '@pnp/spfx-controls-react/lib/Carousel';\nimport { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';\nimport { ImageFit } from 'office-ui-fabric-react/lib/Image';\nimport { ICarouselImageProps } from '@pnp/spfx-controls-react/lib/controls/carousel/CarouselImage';\n```",
      "line": 4,
      "selection": {
        "start": {
          "line": 4,
          "character": 1
        },
        "end": {
          "line": 4,
          "character": 54
        }
      },
      "title": "Component imports"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "Let's define an interface that will be used to provide typings for the images we request from SharePoint doc library:\n\n```typescript\n// interface to store images from SP\nexport interface ICarouselImage {\n  imageSrc: string;\n  title?: string;\n  description?: string;\n  url?: string;\n}\n```",
      "line": 12,
      "title": "ICarouselImage interface"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "And we also need a state for our component to store requested images.\n\n```typescript\n\nexport interface IPnPCarouselDemoWebPartState {\n  images?: ICarouselImage[];\n}\n```",
      "line": 19,
      "title": "Component State interface"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "Update state type\n```typescript\nIPnPCarouselDemoWebPartState\n```",
      "line": 23,
      "selection": {
        "start": {
          "line": 23,
          "character": 99
        },
        "end": {
          "line": 23,
          "character": 101
        }
      },
      "title": "Component state type"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "Adding constructor to initialize base empty state:\n```typescript\n\nconstructor(props: IPnPCarouselDemoWebPartProps) {\n  super(props);\n\n  this.state = {};\n}\n\n\n```",
      "line": 24,
      "title": "Component constructor"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "Let's implement a method to request data from SharePoint. We will use `spHttpClient` and SharePoint REST API to get the images.\n\n```typescript\n\nprivate getImages = async(props: IPnPCarouselDemoWebPartProps): Promise<void> => {\n  if (!props.siteUrl || !props.listId) {\n    return;\n  }\n\n  const response = await this.props.spHttpClient.get(`${props.siteUrl}/_api/lists/getById('${props.listId}')/items?$expand=File`, SPHttpClient.configurations.v1);\n  const jsonResponse = await response.json();\n\n  const images: ICarouselImage[] = [];\n\n  if (jsonResponse.value && jsonResponse.value.length) {\n    jsonResponse.value.forEach(v => {\n      images.push({\n        imageSrc: v.File.ServerRelativeUrl,\n        title: v.Title,\n        description: v.Description,\n        url: v.Url.Url\n      });\n    });\n  }\n\n  this.setState({\n    images: images\n  });\n}\n```",
      "line": 49,
      "title": "GetImages"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "Now let's call the getImages when the component did mount and if there are props changes\n\n```typescript\n\npublic componentDidMount() {\n  this.getImages(this.props);\n}\n\npublic componentWillReceiveProps(nextProps: IPnPCarouselDemoWebPartProps) {\n  if (nextProps.listId !== this.props.listId || nextProps.siteUrl !== this.props.siteUrl) {\n    this.getImages(nextProps);\n  }\n}\n\n\n```",
      "line": 30,
      "title": "Call getImages"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "Now, let's modify `render` method to diplay `WebPartTitle` and `Placeholder` if the web part has not been configured.\n\n```typescript\nconst {\n  siteUrl,\n  listId,\n  title,\n  displayMode,\n  onConfigure,\n  updateTitle\n} = this.props;\n\nreturn (\n  <div className={ styles.pnPCarouselDemoWebPart }>\n    <WebPartTitle displayMode={displayMode} title={title} updateProperty={updateTitle} />\n    {(!siteUrl || !listId) && <Placeholder\n    iconName='Edit'\n    iconText='Configure your web part'\n    description='Please, enter site url and list id'\n    buttonLabel='Configure'\n    onConfigure={onConfigure} />}\n  </div>\n);\n```",
      "line": 58,
      "selection": {
        "start": {
          "line": 43,
          "character": 5
        },
        "end": {
          "line": 58,
          "character": 7
        }
      },
      "title": "Render without main"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "For the main content let's implement a helper method: it will display spinner if the images are being loaded, or the carousel\n\n```typescript\nprivate getMainContent = (): JSX.Element => {\n  const {\n    images\n  } = this.state;\n\n  if (images) {\n    return <Carousel\n      element={images.map(image => {\n        return {\n          ...image,\n          key: image.imageSrc,\n          imageFit: ImageFit.contain,\n          showDetailsOnHover: true\n        } as ICarouselImageProps;\n      })}\n      buttonsLocation={CarouselButtonsLocation.center}\n      buttonsDisplay={CarouselButtonsDisplay.buttonsOnly}\n      isInfinite={true}\n      indicatorStyle={{\n        backgroundColor: '#000'\n      }}\n      onMoveNextClicked={() => {}}\n      onMovePrevClicked={() => {}}\n      pauseOnHover={true}\n       />;\n  }\n  else {\n    return <Spinner size={SpinnerSize.large} />;\n  }\n}\n```",
      "line": 64,
      "title": "getMainContent"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "Let's add our main content to the `render` method\n```typescript\n{!!siteUrl && !!listId && this.getMainContent()}\n\n```",
      "line": 61,
      "title": "getMainContent in render"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.module.scss",
      "description": "Last thing is to add styles for the carousel content.\nWe need to provide the `height` of the content, otherwise it will render to timy.\n\n```typescript\n.carouselImageContent {\n  height: 400px;\n}\n```",
      "line": 4,
      "selection": {
        "start": {
          "line": 4,
          "character": 3
        },
        "end": {
          "line": 73,
          "character": 4
        }
      },
      "title": "Carousel content height css"
    },
    {
      "file": "src/webparts/pnPCarouselDemoWebPart/components/PnPCarouselDemoWebPart.tsx",
      "description": "And apply created CSS class to the content container:\n\n```typescript\ncontentContainerStyles={styles.carouselImageContent}\n\n```",
      "line": 88,
      "title": "Apply style"
    }
  ]
}
